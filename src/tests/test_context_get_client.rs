use anyhow::{Result, anyhow};
use kube::{Client, Config, config::{KubeConfigOptions, Kubeconfig}};
use std::{env, fs::read_to_string, path::PathBuf};

/// Default path to the kubeconfig file generated by docker-compose if KUBECONFIG env var is not set
static DEFAULT_KUBECONFIG_PATH: &str = "/home/shorwood/Workspaces/unmcp/k3s/kubeconfig/kubeconfig.yaml";

use super::TestContext;

#[cfg(test)]
impl TestContext {
	pub async fn get_client(&self) -> Result<Client> {

		// Use KUBECONFIG environment variable if set, otherwise use the default path
		let kubeconfig_path = env::var("KUBECONFIG")
			.map(PathBuf::from)
			.unwrap_or_else(|_| PathBuf::from(DEFAULT_KUBECONFIG_PATH));

		// --- Read kubeconfig from file
		let kubeconfig_yaml = read_to_string(&kubeconfig_path)
			.map_err(|e| anyhow!("Failed to read kubeconfig file: {}", e))?;
	
		// --- Parse the kubeconfig
		let kubeconfig = Kubeconfig::from_yaml(&kubeconfig_yaml)
			.map_err(|e| anyhow!("Error parsing kubeconfig: {}", e))?;
		
		// --- Create the client.
		let client_config_options = KubeConfigOptions::default();
		let client_config = Config::from_custom_kubeconfig(kubeconfig, &client_config_options).await?;
		let client = Client::try_from(client_config)?;
		Ok(client)
	}
}

#[cfg(test)]
mod tests {
	use crate::tests::TestContext;
	use pretty_assertions::assert_eq;

	#[tokio::test]
	async fn test_get_client_default() {
		let context = TestContext::new().unwrap();
		let client = context.get_client().await.unwrap();
		let api_version = client.apiserver_version().await.unwrap();
		assert_eq!(api_version.git_commit, "35a47239188444222067c25cc096346adb20401f");
	}
}
