name: CI
permissions:
  id-token: write
  contents: write
  packages: write
  attestations: write

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  ci:
    name: Continuous Integration & Deployment to Registry
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: nmcp
            asset_name: nmcp-linux-amd64
    runs-on: ${{ matrix.os }}
    steps:

      # Setup Nix with Cachix for remote nix store caching. Additionally, setup
      # Docker Buildx so we can push to the GitHub Container Registry and Docker Hub.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: cachix/cachix-action@v14
        with:
          name: nwrx
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Generate the metadata (tags and labels) for the Docker image using the
      # docker/metadata-action. This will create tags based on the branch name,
      # pull request number, and semantic versioning. It will also create labels
      # based on the GitHub repository, commit SHA, and other relevant information.
      - id: metadata
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      # Build the binary with nix and upload it as an artifact.
      - run: nix build

      # Generate the checksum for the binary and copy it to the output directory.
      - id: checksum
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        run: |
          CHECKSUM=$(sha256sum ./result/bin/${{ matrix.artifact_name }} | cut -d' ' -f1)
          mkdir -p ./output
          echo $CHECKSUM > ./output/${{ matrix.asset_name }}.sha256
          cp ./result/bin/${{ matrix.artifact_name }} ./output/${{ matrix.asset_name }}

      # Generate a CHANGELOG.md file so we can use it in the release.
      - id: changelog
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        run: 
          CHANGELOG=$(nix develop --command git-cliff)
          echo "changelog=${CHANGELOG}" >> $GITHUB_OUTPUT

      - uses: svenstaro/upload-release-action@v2
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        with:
          overwrite: true
          make_latest: true
          file: ./output/${{ matrix.asset_name }}
          file_glob: /output/*
          body: ${{ steps.changelog.outputs.changelog }}
          tag: ${{ github.ref }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}

      # Build the Docker image using Nix.
      - if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        run: |
          nix build .#dockerImage
          IMAGE=$(docker load < ./result | tail -n 1 | cut -d' ' -f3)

          # Tag each image with the metadata generated in the previous step.
          TAGS=$(echo "${{ steps.metadata.outputs.tags }}" | tr '\n' ' ')
          for TAG in $TAGS; do
            docker tag ${IMAGE} ${TAG}
          done

          # Push the Docker image to the GitHub Container Registry.
          docker push ghcr.io/${{ github.repository }} --all-tags
